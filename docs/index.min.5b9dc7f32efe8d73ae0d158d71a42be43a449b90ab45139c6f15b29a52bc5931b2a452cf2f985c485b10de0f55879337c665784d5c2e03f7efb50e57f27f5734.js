var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/F24-CSC2770/docs/prologue/schedule/",title:"CSC 2770 Schedule",description:`This is a tentative schedule and will change.
Grading details #Assessment Type Weightage Additional Information General Participation 10% Homework 30% Announced quizzes via iLearn. Programming Assignments 30% Exams 30% Class Schedule #Here\u0026rsquo;s the revised schedule with the updated topics and formatted using | as the delimiter:
Week Dates Topics Week 1 Aug 26-30 Course Introduction, Overview, Number Representation (Hex, Binary, 2’s Complement) Slides: Introduction Week 2 Sept 4-6 Number Representation (Hex, Binary, 2’s Complement) (No class on Sept 2) Slides: Bits and Ints Slides: Floats Week 3 Sept 9-13 Memory Organization, Memory Management Week 4 Sept 16-20 CPU Architecture (Program Counter, Registers, Fetch-and-Execute Cycle, Multi-Core), Distributed Architectures, Process Management, Introduction to Operating Systems Week 5 Sept 23-27 Storage Architecture Week 6 Sept 30 - Oct 4 Networking Fundamentals, The Internet, Network Edge Week 7 Oct 7-11 System Security Fundamentals Week 8 Oct 14-16 Advanced Memory Organization: Virtual Memory, Caching Week 9 Oct 21-25 Asynchrony, Concurrency, Parallelism, Locality Week 10 Oct 28 - Nov 1 Advances in Storage: SSD, NVMe Week 11 Nov 13-15 Network Protocol Layers, Service Models, Addressing Schemes Week 12 Nov 18-22 Introduction to Parallelism, Performance Optimization Week 13 Nov 25-29 TBD (No class on Nov 27-29) Week 14 Dec 2-4 TBD Final Exam Dec 9 Comprehensive Final Exam `,content:`This is a tentative schedule and will change.
Grading details #Assessment Type Weightage Additional Information General Participation 10% Homework 30% Announced quizzes via iLearn. Programming Assignments 30% Exams 30% Class Schedule #Here\u0026rsquo;s the revised schedule with the updated topics and formatted using | as the delimiter:
Week Dates Topics Week 1 Aug 26-30 Course Introduction, Overview, Number Representation (Hex, Binary, 2’s Complement) Slides: Introduction Week 2 Sept 4-6 Number Representation (Hex, Binary, 2’s Complement) (No class on Sept 2) Slides: Bits and Ints Slides: Floats Week 3 Sept 9-13 Memory Organization, Memory Management Week 4 Sept 16-20 CPU Architecture (Program Counter, Registers, Fetch-and-Execute Cycle, Multi-Core), Distributed Architectures, Process Management, Introduction to Operating Systems Week 5 Sept 23-27 Storage Architecture Week 6 Sept 30 - Oct 4 Networking Fundamentals, The Internet, Network Edge Week 7 Oct 7-11 System Security Fundamentals Week 8 Oct 14-16 Advanced Memory Organization: Virtual Memory, Caching Week 9 Oct 21-25 Asynchrony, Concurrency, Parallelism, Locality Week 10 Oct 28 - Nov 1 Advances in Storage: SSD, NVMe Week 11 Nov 13-15 Network Protocol Layers, Service Models, Addressing Schemes Week 12 Nov 18-22 Introduction to Parallelism, Performance Optimization Week 13 Nov 25-29 TBD (No class on Nov 27-29) Week 14 Dec 2-4 TBD Final Exam Dec 9 Comprehensive Final Exam `}),e.add({id:1,href:"/F24-CSC2770/docs/prologue/semester-long-project/",title:"Programming Challenge",description:`High-Level Problem Description: \u0026ldquo;Mission Control: The Ultimate Systems Challenge\u0026rdquo; #Scenario Overview:
In the year 2145, humanity has established a colony on the distant planet Epsilon 6. The colony\u0026rsquo;s survival depends on building, managing, and optimizing interconnected computer systems that handle everything from life support and resource management to defense and communication. Each team represents a different faction within the colony (e.g., Engineering, Medical, Defense), responsible for maintaining a critical subsystem.`,content:`High-Level Problem Description: \u0026ldquo;Mission Control: The Ultimate Systems Challenge\u0026rdquo; #Scenario Overview:
In the year 2145, humanity has established a colony on the distant planet Epsilon 6. The colony\u0026rsquo;s survival depends on building, managing, and optimizing interconnected computer systems that handle everything from life support and resource management to defense and communication. Each team represents a different faction within the colony (e.g., Engineering, Medical, Defense), responsible for maintaining a critical subsystem.
However, the colony faces significant challenges: limited resources, harsh environmental conditions, and potential threats from rival factions or extraterrestrial forces. The success of each faction—and the colony as a whole—depends on their ability to efficiently utilize their constrained resources to solve complex computing problems.
Objective:
Teams must complete a series of challenges that involve programming tasks in C or C++ under resource constraints. Each challenge reflects real-world computing scenarios where teams must balance efficiency, performance, and resource management. The goal is to build a robust and resilient network of systems capable of supporting the colony\u0026rsquo;s growth and defense.
Bi-Weekly Problem Descriptions #Weeks 1-2: Binary Conversion Under Pressure #Problem: The colony receives an encrypted communication from Earth in multiple number formats (decimal, binary, hexadecimal). The colony\u0026rsquo;s communication system has limited processing power and must quickly decode the message to send an urgent response. Task: Write an optimized C program to convert numbers between different formats within strict time limits. Resource Constraints: Limited CPU cycles available for conversions; the program must run within a maximum execution time of 1 second for each conversion. Outcome: Teams learn to optimize conversion algorithms for speed and efficiency, crucial for real-time data processing. #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; // Function prototypes void decimalToBinary(int decimal); void decimalToHex(int decimal); void binaryToDecimal(char *binary); void hexToDecimal(char *hex); // Main function to handle inputs and trigger conversions int main(int argc, char *argv[]) { // Ensure correct number of arguments are provided if (argc != 3) { printf(\u0026quot;Usage: %s -[d|b|h] [number]\\n\u0026quot;, argv[0]); printf(\u0026quot;Options:\\n\u0026quot;); printf(\u0026quot;-d [decimal] Convert decimal to binary and hexadecimal\\n\u0026quot;); printf(\u0026quot;-b [binary] Convert binary to decimal and hexadecimal\\n\u0026quot;); printf(\u0026quot;-h [hexadecimal] Convert hexadecimal to decimal and binary\\n\u0026quot;); return 1; } // Extract the flag and value from arguments // Check which flag was provided and call the appropriate function } return 0; } // Function to convert decimal to binary (placeholder) void decimalToBinary(int decimal) { printf(\u0026quot;Converting decimal %d to binary...\\n\u0026quot;, decimal); // Conversion logic will go here printf(\u0026quot;Binary: %s\\n\u0026quot;, binary); } // Function to convert decimal to hexadecimal (placeholder) void decimalToHex(int decimal) { printf(\u0026quot;Converting decimal %d to hexadecimal...\\n\u0026quot;, decimal); // Conversion logic will go here printf(\u0026quot;Hexadecimal: %X\\n\u0026quot;, decimal); } // Function to convert binary to decimal (placeholder) void binaryToDecimal(char *binary) { printf(\u0026quot;Converting binary %s to decimal...\\n\u0026quot;, binary); // Conversion logic will go here printf(\u0026quot;Decimal: %d\\n\u0026quot;, decimal); } // Function to convert hexadecimal to decimal (placeholder) void hexToDecimal(char *hex) { printf(\u0026quot;Converting hexadecimal %s to decimal...\\n\u0026quot;, hex); // Conversion logic will go here printf(\u0026quot;Decimal: %d\\n\u0026quot;, decimal); } Weeks 3-4: Memory Mapping with Limited Space #Problem: A critical subsystem malfunction requires immediate memory reorganization. Due to a hardware failure, only a small portion of the memory is available. Teams need to allocate and manage memory efficiently to maintain subsystem operations. Task: Create a C program that allocates memory dynamically for different data types within a limited memory space (e.g., 256 bytes). Resource Constraints: Limited memory availability; the program must avoid memory fragmentation and efficiently manage space for dynamic allocations. Outcome: Teams learn effective memory management strategies, including dynamic allocation and avoiding memory leaks under constrained conditions. Weeks 5-6: Dynamic Memory Manager with Limited Resources #Problem: The colony\u0026rsquo;s mainframe is overloaded with emergency data logs due to a storm. The system needs a dynamic memory manager that can handle frequent allocation and deallocation without running out of memory. Task: Develop a memory manager in C that allocates and deallocates memory dynamically, ensuring no memory leaks within a restricted memory limit (e.g., 512 bytes). Resource Constraints: Limited memory space and frequent allocation/deallocation requests; the memory manager must efficiently manage memory and prevent fragmentation. Outcome: Teams enhance their skills in dynamic memory management, learning to handle fluctuating data loads and prevent memory leaks in resource-constrained environments. Weeks 7-8: CPU Cycle Optimization with Limited Processing Power #Problem: A power outage forces the colony to run its operations on a backup CPU with limited processing power. Teams must optimize the CPU\u0026rsquo;s fetch-and-execute cycle to ensure all critical systems remain operational. Task: Simulate a CPU fetch-and-execute cycle in C, optimizing instruction execution under cycle constraints (e.g., 100 cycles). Resource Constraints: Limited CPU cycles available; teams must optimize the order and execution of instructions to minimize cycle usage while maintaining functionality. Outcome: Students learn CPU optimization techniques and develop the ability to maximize efficiency under processing constraints. Weeks 9-10: Storage System Designer with Limited Access #Problem: The colony\u0026rsquo;s data center faces a critical storage shortage. Teams must redesign their storage systems to prioritize essential data and optimize read/write operations under constrained access conditions. Task: Implement a storage management system in C that simulates limited read/write operations and prioritizes critical data. Resource Constraints: Limited storage operations (e.g., 50 read/write operations); teams must prioritize essential data and optimize access patterns to reduce latency. Outcome: Teams gain experience in managing storage resources efficiently, ensuring optimal data retrieval and storage under constrained conditions. Weeks 11-12: Network Configuration with Limited Bandwidth #Problem: Communication between different sectors of the colony is disrupted due to a bandwidth limitation. Teams must reconfigure their network setup to ensure reliable and efficient communication with minimal bandwidth. Task: Use socket programming in C to develop a client-server application that optimizes data transmission over a constrained network (e.g., 1 Mbps). Resource Constraints: Limited network bandwidth; teams must implement efficient data transmission protocols to minimize delays and maximize throughput. Outcome: Teams learn to optimize network configurations and data transmission methods under bandwidth constraints, crucial for maintaining communication quality. Weeks 13-14: Secure Communication with Limited Resources #Problem: A rival faction attempts to intercept colony communications. Teams must enhance their network security protocols to encrypt data and authenticate users while operating under limited processing and memory resources. Task: Enhance the client-server application to use efficient encryption and authentication techniques in C, balancing security with available resources. Resource Constraints: Limited processing power and memory; teams must implement security measures that protect data integrity and confidentiality without overloading the system. Outcome: Students learn to balance security and performance, optimizing cryptographic algorithms under resource constraints to ensure secure communication. Success Criteria: #To succeed, each team must complete the bi-weekly challenges by writing efficient and effective C/C++ programs. Performance is evaluated based on the correctness of their solutions, the efficiency of resource usage, and the ability to optimize under constraints. The team with the most points at the end of the 10-week period (spanning 14 weeks) is awarded the title of \u0026ldquo;Ultimate Systems Champions\u0026rdquo;.
`}),e.add({id:2,href:"/F24-CSC2770/docs/prologue/lab1/",title:"Lab1",description:`Instructions #Note: The following guide provides step-by-step instructions for creating and configuring virtual machines (VMs) on the Google Cloud Platform (GCP). Subsequently, the guide outlines the process of establishing network connectivity between these VMs using the “ping” command. This exercise aims to provide students with a practical understanding of cloud-based virtualization, network configuration, and basic connectivity testing. This lab is ungraded.
Lab Objectives #Creating two virtual machines on Google Cloud.`,content:`Instructions #Note: The following guide provides step-by-step instructions for creating and configuring virtual machines (VMs) on the Google Cloud Platform (GCP). Subsequently, the guide outlines the process of establishing network connectivity between these VMs using the “ping” command. This exercise aims to provide students with a practical understanding of cloud-based virtualization, network configuration, and basic connectivity testing. This lab is ungraded.
Lab Objectives #Creating two virtual machines on Google Cloud. Configuring network settings for the VMs. Testing network connectivity between the VMs using the “ping” command. Prerequisites #An active Google Cloud account. - You can create an account that comes with sign-up credits. The current sign-up credit is \$300 for 90 days. We will distribute additional credits as they become available. Basic familiarity with command-line interfaces and networking concepts. We will provide coupon codes once we hear from Google. Step 1: Creating Virtual Machines #Log in to your Google Cloud Console. Navigate to the Compute Engine section and click on “VM instances.” Click the “Create Instance” button to create your first VM. Choose a suitable name and region for your VM. Select a machine type based on your requirements. Configure boot disk settings. Configure firewall rules to allow ICMP (ping) traffic. Step 2: Configuring Network Settings #Once both VMs are created, take note of their internal and external IP addresses. To enable communication between the VMs, configure their firewall settings to allow ICMP traffic. In the “Firewall” section, establish a new firewall rule. Provide a name and description for the rule. Set the target tags to match the VMs you’ve created. Define the source IP ranges as the internal IP address of the other VM. Allow ICMP protocol Step 3: Testing Connectivity #Access one of the VMs through SSH using a terminal or command prompt. Utilize the “ping” command to examine connectivity to the other VM. `}),e.add({id:3,href:"/F24-CSC2770/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}),e.add({id:4,href:"/F24-CSC2770/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()